use crate::{cpu::opcodes, cpu::registers, memory, memory::Addressable};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Clone)]
pub struct SM83 {
    pub registers: registers::Registers,
    pub halted: bool,
    pub stopped: bool,
}

impl SM83 {
    pub fn new() -> Self {
        SM83 { registers: registers::Registers::new(), halted: false, stopped: false }
    }

    pub fn step(&mut self, mmio: &mut memory::mmio::MMIO) -> u8 {
        let mut cycles = 0;
        
        // Check for pending interrupts
        let pending_interrupt = self.get_pending_interrupt(mmio);
        
        // If halted, check if we should exit halt state
        if self.halted {
            if pending_interrupt.is_some() {
                self.halted = false;
            } else {
                // CPU is halted and no interrupt is pending, consume 1 cycle and return
                return 1;
            }
        }
        
        // Handle interrupts if IME is enabled and there's a pending interrupt
        if self.registers.ime && pending_interrupt.is_some() {
            let flag = pending_interrupt.unwrap();
            
            self.registers.ime = false;
            self.registers.set_flag(registers::Flag::Carry, false);
            self.registers.set_flag(registers::Flag::HalfCarry, false);
            self.registers.set_flag(registers::Flag::Negative, false);
            self.registers.set_flag(registers::Flag::Zero, false);

            self.registers.sp -= 2;
            mmio.write(self.registers.sp, (self.registers.pc & 0x00FF) as u8);
            mmio.write(self.registers.sp + 1, (self.registers.pc >> 8) as u8);
            self.registers.pc = match flag {
                registers::InterruptFlag::VBlank => 0x40,
                registers::InterruptFlag::LCD => 0x48,
                registers::InterruptFlag::Timer => 0x50,
                registers::InterruptFlag::Serial => 0x58,
                registers::InterruptFlag::Joypad => 0x60,
            };
            self.set_interrupt_flag(flag, false, mmio);
            cycles += 5; // Interrupt handling takes 5 extra cycles
        }
        
        let opcode = mmio.read(self.registers.pc);
        self.registers.pc += 1;
        self.execute(opcode, mmio) + cycles
    }

    pub fn set_interrupt_flag(&mut self, flag: registers::InterruptFlag, value: bool, mmio: &mut memory::mmio::MMIO) {
        if value {
            mmio.write(registers::INTERRUPT_FLAG, mmio.read(registers::INTERRUPT_FLAG) | flag as u8);
        } else {
            mmio.write(registers::INTERRUPT_FLAG, mmio.read(registers::INTERRUPT_FLAG) & !(flag as u8));
        }
    }

    pub fn get_interrupt_flag(&self, flag: registers::InterruptFlag, mmio: &memory::mmio::MMIO) -> bool {
        (mmio.read(registers::INTERRUPT_FLAG) & (flag as u8)) != 0
    }

    pub fn get_interrupt_enable_flag(&self, flag: registers::InterruptFlag, mmio: &memory::mmio::MMIO) -> bool {
        (mmio.read(registers::INTERRUPT_ENABLE) & (flag as u8)) != 0
    }

    fn get_pending_interrupt(&self, mmio: &memory::mmio::MMIO) -> Option<registers::InterruptFlag> {
        // Check interrupts in priority order (highest to lowest)
        if self.get_interrupt_enable_flag(registers::InterruptFlag::VBlank, mmio) && self.get_interrupt_flag(registers::InterruptFlag::VBlank, mmio) {
            Some(registers::InterruptFlag::VBlank)
        } else if self.get_interrupt_enable_flag(registers::InterruptFlag::LCD, mmio) && self.get_interrupt_flag(registers::InterruptFlag::LCD, mmio) {
            Some(registers::InterruptFlag::LCD)
        } else if self.get_interrupt_enable_flag(registers::InterruptFlag::Timer, mmio) && self.get_interrupt_flag(registers::InterruptFlag::Timer, mmio) {
            Some(registers::InterruptFlag::Timer)
        } else if self.get_interrupt_enable_flag(registers::InterruptFlag::Serial, mmio) && self.get_interrupt_flag(registers::InterruptFlag::Serial, mmio) {
            Some(registers::InterruptFlag::Serial)
        } else if self.get_interrupt_enable_flag(registers::InterruptFlag::Joypad, mmio) && self.get_interrupt_flag(registers::InterruptFlag::Joypad, mmio) {
            Some(registers::InterruptFlag::Joypad)
        } else {
            None
        }
    }

    fn execute(&mut self, opcode: u8, mmio: &mut memory::mmio::MMIO) -> u8 {
        match opcode {
            0x00 => opcodes::nop(self, mmio),
            0x01 => opcodes::ld_bc_imm(self, mmio),
            0x02 => opcodes::ld_memory_bc_a(self, mmio),
            0x03 => opcodes::inc_bc(self, mmio),
            0x04 => opcodes::inc_b(self, mmio),
            0x05 => opcodes::dec_b(self, mmio),
            0x06 => opcodes::ld_b_imm(self, mmio),
            0x07 => opcodes::rlca(self, mmio),
            0x08 => opcodes::ld_memory_imm_16_sp(self, mmio),
            0x09 => opcodes::add_hl_bc(self, mmio),
            0x0A => opcodes::ld_a_memory_bc(self, mmio),
            0x0B => opcodes::dec_bc(self, mmio),
            0x0C => opcodes::inc_c(self, mmio),
            0x0D => opcodes::dec_c(self, mmio),
            0x0E => opcodes::ld_c_imm(self, mmio),
            0x0F => opcodes::rrca(self, mmio),
            0x11 => opcodes::ld_de_imm(self, mmio),
            0x12 => opcodes::ld_memory_de_a(self, mmio),
            0x13 => opcodes::inc_de(self, mmio),
            0x14 => opcodes::inc_d(self, mmio),
            0x15 => opcodes::dec_d(self, mmio),
            0x16 => opcodes::ld_d_imm(self, mmio),
            0x17 => opcodes::rla(self, mmio),
            0x18 => opcodes::jr_imm(self, mmio),
            0x19 => opcodes::add_hl_de(self, mmio),
            0x1A => opcodes::ld_a_memory_de(self, mmio),
            0x1B => opcodes::dec_de(self, mmio),
            0x1C => opcodes::inc_e(self, mmio),
            0x1D => opcodes::dec_e(self, mmio),
            0x1E => opcodes::ld_e_imm(self, mmio),
            0x1F => opcodes::rra(self, mmio),
            0x20 => opcodes::jr_nz_imm(self, mmio),
            0x21 => opcodes::ld_hl_imm(self, mmio),
            0x22 => opcodes::ld_memory_hl_inc_a(self, mmio),
            0x23 => opcodes::inc_hl(self, mmio),
            0x24 => opcodes::inc_h(self, mmio),
            0x25 => opcodes::dec_h(self, mmio),
            0x26 => opcodes::ld_h_imm(self, mmio),
            0x27 => opcodes::daa(self, mmio),
            0x28 => opcodes::jr_z_imm(self, mmio),
            0x29 => opcodes::add_hl_hl(self, mmio),
            0x2A => opcodes::ld_a_memory_hl_inc(self, mmio),
            0x2B => opcodes::dec_hl(self, mmio),
            0x2C => opcodes::inc_l(self, mmio),
            0x2D => opcodes::dec_l(self, mmio),
            0x2E => opcodes::ld_l_imm(self, mmio),
            0x2F => opcodes::cpl(self, mmio),
            0x30 => opcodes::jr_nc_imm(self, mmio),
            0x31 => opcodes::ld_sp_imm(self, mmio),
            0x32 => opcodes::ld_memory_hl_dec_a(self, mmio),
            0x33 => opcodes::inc_sp(self, mmio),
            0x34 => opcodes::inc_memory_hl(self, mmio),
            0x35 => opcodes::dec_memory_hl(self, mmio),
            0x36 => opcodes::ld_memory_hl_imm(self, mmio),
            0x37 => opcodes::scf(self, mmio),
            0x38 => opcodes::jr_c_imm(self, mmio),
            0x39 => opcodes::add_hl_sp(self, mmio),
            0x3A => opcodes::ld_a_memory_hl_dec(self, mmio),
            0x3B => opcodes::dec_sp(self, mmio),
            0x3C => opcodes::inc_a(self, mmio),
            0x3D => opcodes::dec_a(self, mmio),
            0x3E => opcodes::ld_a_imm(self, mmio),
            0x40 => opcodes::ld_b_b(self, mmio),
            0x41 => opcodes::ld_b_c(self, mmio),
            0x42 => opcodes::ld_b_d(self, mmio),
            0x43 => opcodes::ld_b_e(self, mmio),
            0x44 => opcodes::ld_b_h(self, mmio),
            0x45 => opcodes::ld_b_l(self, mmio),
            0x46 => opcodes::ld_b_memory_hl(self, mmio),
            0x47 => opcodes::ld_b_a(self, mmio),
            0x48 => opcodes::ld_c_b(self, mmio),
            0x49 => opcodes::ld_c_c(self, mmio),
            0x4A => opcodes::ld_c_d(self, mmio),
            0x4B => opcodes::ld_c_e(self, mmio),
            0x4C => opcodes::ld_c_h(self, mmio),
            0x4D => opcodes::ld_c_l(self, mmio),
            0x4E => opcodes::ld_c_memory_hl(self, mmio),
            0x4F => opcodes::ld_c_a(self, mmio),
            0x50 => opcodes::ld_d_b(self, mmio),
            0x51 => opcodes::ld_d_c(self, mmio),
            0x52 => opcodes::ld_d_d(self, mmio),
            0x53 => opcodes::ld_d_e(self, mmio),
            0x54 => opcodes::ld_d_h(self, mmio),
            0x55 => opcodes::ld_d_l(self, mmio),
            0x56 => opcodes::ld_d_memory_hl(self, mmio),
            0x57 => opcodes::ld_d_a(self, mmio),
            0x58 => opcodes::ld_e_b(self, mmio),
            0x59 => opcodes::ld_e_c(self, mmio),
            0x5A => opcodes::ld_e_d(self, mmio),
            0x5B => opcodes::ld_e_e(self, mmio),
            0x5C => opcodes::ld_e_h(self, mmio),
            0x5D => opcodes::ld_e_l(self, mmio),
            0x5E => opcodes::ld_e_memory_hl(self, mmio),
            0x5F => opcodes::ld_e_a(self, mmio),
            0x60 => opcodes::ld_h_b(self, mmio),
            0x61 => opcodes::ld_h_c(self, mmio),
            0x62 => opcodes::ld_h_d(self, mmio),
            0x63 => opcodes::ld_h_e(self, mmio),
            0x64 => opcodes::ld_h_h(self, mmio),
            0x65 => opcodes::ld_h_l(self, mmio),
            0x66 => opcodes::ld_h_memory_hl(self, mmio),
            0x67 => opcodes::ld_h_a(self, mmio),
            0x68 => opcodes::ld_l_b(self, mmio),
            0x69 => opcodes::ld_l_c(self, mmio),
            0x6A => opcodes::ld_l_d(self, mmio),
            0x6B => opcodes::ld_l_e(self, mmio),
            0x6C => opcodes::ld_l_h(self, mmio),
            0x6D => opcodes::ld_l_l(self, mmio),
            0x6E => opcodes::ld_l_memory_hl(self, mmio),
            0x6F => opcodes::ld_l_a(self, mmio),
            0x70 => opcodes::ld_memory_hl_b(self, mmio),
            0x71 => opcodes::ld_memory_hl_c(self, mmio),
            0x72 => opcodes::ld_memory_hl_d(self, mmio),
            0x73 => opcodes::ld_memory_hl_e(self, mmio),
            0x74 => opcodes::ld_memory_hl_h(self, mmio),
            0x75 => opcodes::ld_memory_hl_l(self, mmio),
            0x76 => opcodes::halt(self, mmio),
            0x77 => opcodes::ld_memory_hl_a(self, mmio),
            0x78 => opcodes::ld_a_b(self, mmio),
            0x79 => opcodes::ld_a_c(self, mmio),
            0x7A => opcodes::ld_a_d(self, mmio),
            0x7B => opcodes::ld_a_e(self, mmio),
            0x7C => opcodes::ld_a_h(self, mmio),
            0x7D => opcodes::ld_a_l(self, mmio),
            0x7E => opcodes::ld_a_memory_hl(self, mmio),
            0x7F => opcodes::ld_a_a(self, mmio),
            0x80 => opcodes::add_b(self, mmio),
            0x81 => opcodes::add_c(self, mmio),
            0x82 => opcodes::add_d(self, mmio),
            0x83 => opcodes::add_e(self, mmio),
            0x84 => opcodes::add_h(self, mmio),
            0x85 => opcodes::add_l(self, mmio),
            0x86 => opcodes::add_memory_hl(self, mmio),
            0x87 => opcodes::add_a(self, mmio),
            0x88 => opcodes::adc_b(self, mmio),
            0x89 => opcodes::adc_c(self, mmio),
            0x8A => opcodes::adc_d(self, mmio),
            0x8B => opcodes::adc_e(self, mmio),
            0x8C => opcodes::adc_h(self, mmio),
            0x8D => opcodes::adc_l(self, mmio),
            0x8E => opcodes::adc_a_memory_hl(self, mmio),
            0x8F => opcodes::adc_a(self, mmio),
            0x90 => opcodes::sub_b(self, mmio),
            0x91 => opcodes::sub_c(self, mmio),
            0x92 => opcodes::sub_d(self, mmio),
            0x93 => opcodes::sub_e(self, mmio),
            0x94 => opcodes::sub_h(self, mmio),
            0x95 => opcodes::sub_l(self, mmio),
            0x96 => opcodes::sub_memory_hl(self, mmio),
            0x97 => opcodes::sub_a(self, mmio),
            0xA0 => opcodes::and_b(self, mmio),
            0xA1 => opcodes::and_c(self, mmio),
            0xA2 => opcodes::and_d(self, mmio),
            0xA3 => opcodes::and_e(self, mmio),
            0xA4 => opcodes::and_h(self, mmio),
            0xA5 => opcodes::and_l(self, mmio),
            0xA6 => opcodes::and_memory_hl(self, mmio),
            0xA7 => opcodes::and_a(self, mmio),
            0xA8 => opcodes::xor_b(self, mmio),
            0xA9 => opcodes::xor_c(self, mmio),
            0xAA => opcodes::xor_d(self, mmio),
            0xAB => opcodes::xor_e(self, mmio),
            0xAC => opcodes::xor_h(self, mmio),
            0xAD => opcodes::xor_l(self, mmio),
            0xAE => opcodes::xor_memory_hl(self, mmio),
            0xAF => opcodes::xor_a(self, mmio),
            0xB0 => opcodes::or_b(self, mmio),
            0xB1 => opcodes::or_c(self, mmio),
            0xB2 => opcodes::or_d(self, mmio),
            0xB3 => opcodes::or_e(self, mmio),
            0xB4 => opcodes::or_h(self, mmio),
            0xB5 => opcodes::or_l(self, mmio),
            0xB6 => opcodes::or_memory_hl(self, mmio),
            0xB7 => opcodes::or_a(self, mmio),
            0xB8 => opcodes::cp_b(self, mmio),
            0xB9 => opcodes::cp_c(self, mmio),
            0xBA => opcodes::cp_d(self, mmio),
            0xBB => opcodes::cp_e(self, mmio),
            0xBC => opcodes::cp_h(self, mmio),
            0xBD => opcodes::cp_l(self, mmio),
            0xBE => opcodes::cp_memory_hl(self, mmio),
            0xBF => opcodes::cp_a(self, mmio),
            0xC0 => opcodes::ret_nz(self, mmio),
            0xC1 => opcodes::pop_bc(self, mmio),
            0xC2 => opcodes::jp_nz_imm(self, mmio),
            0xC3 => opcodes::jp_imm(self, mmio),
            0xC4 => opcodes::call_nz_imm(self, mmio),
            0xC5 => opcodes::push_bc(self, mmio),
            0xC6 => opcodes::add_imm(self, mmio),
            0xC7 => opcodes::rst_00(self, mmio),
            0xC8 => opcodes::ret_z(self, mmio),
            0xC9 => opcodes::ret(self, mmio),
            0xCA => opcodes::jp_z_imm(self, mmio),
            0xCB => self.execute_cb(mmio),
            0xCC => opcodes::call_z_imm(self, mmio),
            0xCD => opcodes::call_imm(self, mmio),
            0xCE => opcodes::adc_imm(self, mmio),
            0xCF => opcodes::rst_08(self, mmio),
            0xD0 => opcodes::ret_nc(self, mmio),
            0xD1 => opcodes::pop_de(self, mmio),
            0xD2 => opcodes::jp_nc_imm(self, mmio),
            0xD4 => opcodes::call_nc_imm(self, mmio),
            0xD5 => opcodes::push_de(self, mmio),
            0xD6 => opcodes::sub_imm(self, mmio),
            0xD7 => opcodes::rst_10(self, mmio),
            0xD8 => opcodes::ret_c(self, mmio),
            0xD9 => opcodes::reti(self, mmio),
            0xDA => opcodes::jp_c_imm(self, mmio),
            0xDC => opcodes::call_c_imm(self, mmio),
            0xDE => opcodes::sbc_a_imm(self, mmio),
            0xDF => opcodes::rst_18(self, mmio),
            0xE0 => opcodes::ldh_memory_imm_a(self, mmio),
            0xE1 => opcodes::pop_hl(self, mmio),
            0xE2 => opcodes::ld_memory_c_a(self, mmio),
            0xE5 => opcodes::push_hl(self, mmio),
            0xE6 => opcodes::and_imm(self, mmio),
            0xE7 => opcodes::rst_20(self, mmio),
            0xE8 => opcodes::add_sp_imm(self, mmio),
            0xE9 => opcodes::jp_hl(self, mmio),
            0xEA => opcodes::ld_memory_imm_a_16(self, mmio),
            0xEE => opcodes::xor_imm(self, mmio),
            0xEF => opcodes::rst_28(self, mmio),
            0xF0 => opcodes::ldh_a_memory_imm(self, mmio),
            0xF1 => opcodes::pop_af(self, mmio),
            0xF3 => opcodes::di(self, mmio),
            0xF5 => opcodes::push_af(self, mmio),
            0xF6 => opcodes::or_imm(self, mmio),
            0xF7 => opcodes::rst_30(self, mmio),
            0xF8 => opcodes::ld_hl_sp_imm(self, mmio),
            0xF9 => opcodes::ld_sp_hl(self, mmio),
            0xFA => opcodes::ld_a_memory_imm_16(self, mmio),
            0xFB => opcodes::ei(self, mmio),
            0xFE => opcodes::cp_imm(self, mmio),
            0xFF => opcodes::rst_38(self, mmio),
            _ => unimplemented!("Opcode 0x{:02X} not implemented at PC 0x{:04X}", opcode, self.registers.pc - 1),
        }
    }

    fn execute_cb(&mut self, mmio: &mut memory::mmio::MMIO) -> u8 {
        let opcode = mmio.read(self.registers.pc);
        self.registers.pc += 1;
        match opcode {
            0x00 => opcodes::rlc_b(self, mmio),
            0x01 => opcodes::rlc_c(self, mmio),
            0x02 => opcodes::rlc_d(self, mmio),
            0x03 => opcodes::rlc_e(self, mmio),
            0x04 => opcodes::rlc_h(self, mmio),
            0x05 => opcodes::rlc_l(self, mmio),
            0x06 => opcodes::rlc_hl(self, mmio),
            0x07 => opcodes::rlc_a(self, mmio),
            0x08 => opcodes::rrc_b(self, mmio),
            0x09 => opcodes::rrc_c(self, mmio),
            0x0A => opcodes::rrc_d(self, mmio),
            0x0B => opcodes::rrc_e(self, mmio),
            0x0C => opcodes::rrc_h(self, mmio),
            0x0D => opcodes::rrc_l(self, mmio),
            0x0E => opcodes::rrc_hl(self, mmio),
            0x0F => opcodes::rrc_a(self, mmio),
            0x10 => opcodes::rl_b(self, mmio),
            0x11 => opcodes::rl_c(self, mmio),
            0x12 => opcodes::rl_d(self, mmio),
            0x13 => opcodes::rl_e(self, mmio),
            0x14 => opcodes::rl_h(self, mmio),
            0x15 => opcodes::rl_l(self, mmio),
            0x16 => opcodes::rl_hl(self, mmio),
            0x17 => opcodes::rl_a(self, mmio),
            0x18 => opcodes::rr_b(self, mmio),
            0x19 => opcodes::rr_c(self, mmio),
            0x1A => opcodes::rr_d(self, mmio),
            0x1B => opcodes::rr_e(self, mmio),
            0x1C => opcodes::rr_h(self, mmio),
            0x1D => opcodes::rr_l(self, mmio),
            0x1E => opcodes::rr_hl(self, mmio),
            0x1F => opcodes::rr_a(self, mmio),
            0x20 => opcodes::sla_b(self, mmio),
            0x21 => opcodes::sla_c(self, mmio),
            0x22 => opcodes::sla_d(self, mmio),
            0x23 => opcodes::sla_e(self, mmio),
            0x24 => opcodes::sla_h(self, mmio),
            0x25 => opcodes::sla_l(self, mmio),
            0x26 => opcodes::sla_hl(self, mmio),
            0x27 => opcodes::sla_a(self, mmio),
            0x28 => opcodes::sra_b(self, mmio),
            0x29 => opcodes::sra_c(self, mmio),
            0x2A => opcodes::sra_d(self, mmio),
            0x2B => opcodes::sra_e(self, mmio),
            0x2C => opcodes::sra_h(self, mmio),
            0x2D => opcodes::sra_l(self, mmio),
            0x2E => opcodes::sra_hl(self, mmio),
            0x2F => opcodes::sra_a(self, mmio),
            0x30 => opcodes::swap_b(self, mmio),
            0x31 => opcodes::swap_c(self, mmio),
            0x32 => opcodes::swap_d(self, mmio),
            0x33 => opcodes::swap_e(self, mmio),
            0x34 => opcodes::swap_h(self, mmio),
            0x35 => opcodes::swap_l(self, mmio),
            0x36 => opcodes::swap_hl(self, mmio),
            0x37 => opcodes::swap_a(self, mmio),
            0x38 => opcodes::srl_b(self, mmio),
            0x39 => opcodes::srl_c(self, mmio),
            0x3A => opcodes::srl_d(self, mmio),
            0x3B => opcodes::srl_e(self, mmio),
            0x3C => opcodes::srl_h(self, mmio),
            0x3D => opcodes::srl_l(self, mmio),
            0x3E => opcodes::srl_hl(self, mmio),
            0x3F => opcodes::srl_a(self, mmio),
            0x40 => opcodes::bit_0_b(self, mmio),
            0x41 => opcodes::bit_0_c(self, mmio),
            0x42 => opcodes::bit_0_d(self, mmio),
            0x43 => opcodes::bit_0_e(self, mmio),
            0x44 => opcodes::bit_0_h(self, mmio),
            0x45 => opcodes::bit_0_l(self, mmio),
            0x46 => opcodes::bit_0_hl(self, mmio),
            0x47 => opcodes::bit_0_a(self, mmio),
            0x48 => opcodes::bit_1_b(self, mmio),
            0x49 => opcodes::bit_1_c(self, mmio),
            0x4A => opcodes::bit_1_d(self, mmio),
            0x4B => opcodes::bit_1_e(self, mmio),
            0x4C => opcodes::bit_1_h(self, mmio),
            0x4D => opcodes::bit_1_l(self, mmio),
            0x4E => opcodes::bit_1_hl(self, mmio),
            0x4F => opcodes::bit_1_a(self, mmio),
            0x50 => opcodes::bit_2_b(self, mmio),
            0x51 => opcodes::bit_2_c(self, mmio),
            0x52 => opcodes::bit_2_d(self, mmio),
            0x53 => opcodes::bit_2_e(self, mmio),
            0x54 => opcodes::bit_2_h(self, mmio),
            0x55 => opcodes::bit_2_l(self, mmio),
            0x56 => opcodes::bit_2_hl(self, mmio),
            0x57 => opcodes::bit_2_a(self, mmio),
            0x58 => opcodes::bit_3_b(self, mmio),
            0x59 => opcodes::bit_3_c(self, mmio),
            0x5A => opcodes::bit_3_d(self, mmio),
            0x5B => opcodes::bit_3_e(self, mmio),
            0x5C => opcodes::bit_3_h(self, mmio),
            0x5D => opcodes::bit_3_l(self, mmio),
            0x5E => opcodes::bit_3_hl(self, mmio),
            0x5F => opcodes::bit_3_a(self, mmio),
            0x60 => opcodes::bit_4_b(self, mmio),
            0x61 => opcodes::bit_4_c(self, mmio),
            0x62 => opcodes::bit_4_d(self, mmio),
            0x63 => opcodes::bit_4_e(self, mmio),
            0x64 => opcodes::bit_4_h(self, mmio),
            0x65 => opcodes::bit_4_l(self, mmio),
            0x66 => opcodes::bit_4_hl(self, mmio),
            0x67 => opcodes::bit_4_a(self, mmio),
            0x68 => opcodes::bit_5_b(self, mmio),
            0x69 => opcodes::bit_5_c(self, mmio),
            0x6A => opcodes::bit_5_d(self, mmio),
            0x6B => opcodes::bit_5_e(self, mmio),
            0x6C => opcodes::bit_5_h(self, mmio),
            0x6D => opcodes::bit_5_l(self, mmio),
            0x6E => opcodes::bit_5_hl(self, mmio),
            0x6F => opcodes::bit_5_a(self, mmio),
            0x70 => opcodes::bit_6_b(self, mmio),
            0x71 => opcodes::bit_6_c(self, mmio),
            0x72 => opcodes::bit_6_d(self, mmio),
            0x73 => opcodes::bit_6_e(self, mmio),
            0x74 => opcodes::bit_6_h(self, mmio),
            0x75 => opcodes::bit_6_l(self, mmio),
            0x76 => opcodes::bit_6_hl(self, mmio),
            0x77 => opcodes::bit_6_a(self, mmio),
            0x78 => opcodes::bit_7_b(self, mmio),
            0x79 => opcodes::bit_7_c(self, mmio),
            0x7A => opcodes::bit_7_d(self, mmio),
            0x7B => opcodes::bit_7_e(self, mmio),
            0x7C => opcodes::bit_7_h(self, mmio),
            0x7D => opcodes::bit_7_l(self, mmio),
            0x7E => opcodes::bit_7_hl(self, mmio),
            0x7F => opcodes::bit_7_a(self, mmio),
            0x80 => opcodes::res_0_b(self, mmio),
            0x81 => opcodes::res_0_c(self, mmio),
            0x82 => opcodes::res_0_d(self, mmio),
            0x83 => opcodes::res_0_e(self, mmio),
            0x84 => opcodes::res_0_h(self, mmio),
            0x85 => opcodes::res_0_l(self, mmio),
            0x86 => opcodes::res_0_hl(self, mmio),
            0x87 => opcodes::res_0_a(self, mmio),
            0x88 => opcodes::res_1_b(self, mmio),
            0x89 => opcodes::res_1_c(self, mmio),
            0x8A => opcodes::res_1_d(self, mmio),
            0x8B => opcodes::res_1_e(self, mmio),
            0x8C => opcodes::res_1_h(self, mmio),
            0x8D => opcodes::res_1_l(self, mmio),
            0x8E => opcodes::res_1_hl(self, mmio),
            0x8F => opcodes::res_1_a(self, mmio),
            0x90 => opcodes::res_2_b(self, mmio),
            0x91 => opcodes::res_2_c(self, mmio),
            0x92 => opcodes::res_2_d(self, mmio),
            0x93 => opcodes::res_2_e(self, mmio),
            0x94 => opcodes::res_2_h(self, mmio),
            0x95 => opcodes::res_2_l(self, mmio),
            0x96 => opcodes::res_2_hl(self, mmio),
            0x97 => opcodes::res_2_a(self, mmio),
            0x98 => opcodes::res_3_b(self, mmio),
            0x99 => opcodes::res_3_c(self, mmio),
            0x9A => opcodes::res_3_d(self, mmio),
            0x9B => opcodes::res_3_e(self, mmio),
            0x9C => opcodes::res_3_h(self, mmio),
            0x9D => opcodes::res_3_l(self, mmio),
            0x9E => opcodes::res_3_hl(self, mmio),
            0x9F => opcodes::res_3_a(self, mmio),
            0xA0 => opcodes::res_4_b(self, mmio),
            0xA1 => opcodes::res_4_c(self, mmio),
            0xA2 => opcodes::res_4_d(self, mmio),
            0xA3 => opcodes::res_4_e(self, mmio),
            0xA4 => opcodes::res_4_h(self, mmio),
            0xA5 => opcodes::res_4_l(self, mmio),
            0xA6 => opcodes::res_4_hl(self, mmio),
            0xA7 => opcodes::res_4_a(self, mmio),
            0xA8 => opcodes::res_5_b(self, mmio),
            0xA9 => opcodes::res_5_c(self, mmio),
            0xAA => opcodes::res_5_d(self, mmio),
            0xAB => opcodes::res_5_e(self, mmio),
            0xAC => opcodes::res_5_h(self, mmio),
            0xAD => opcodes::res_5_l(self, mmio),
            0xAE => opcodes::res_5_hl(self, mmio),
            0xAF => opcodes::res_5_a(self, mmio),
            0xB0 => opcodes::res_6_b(self, mmio),
            0xB1 => opcodes::res_6_c(self, mmio),
            0xB2 => opcodes::res_6_d(self, mmio),
            0xB3 => opcodes::res_6_e(self, mmio),
            0xB4 => opcodes::res_6_h(self, mmio),
            0xB5 => opcodes::res_6_l(self, mmio),
            0xB6 => opcodes::res_6_hl(self, mmio),
            0xB7 => opcodes::res_6_a(self, mmio),
            0xB8 => opcodes::res_7_b(self, mmio),
            0xB9 => opcodes::res_7_c(self, mmio),
            0xBA => opcodes::res_7_d(self, mmio),
            0xBB => opcodes::res_7_e(self, mmio),
            0xBC => opcodes::res_7_h(self, mmio),
            0xBD => opcodes::res_7_l(self, mmio),
            0xBE => opcodes::res_7_hl(self, mmio),
            0xBF => opcodes::res_7_a(self, mmio),
            0xC0 => opcodes::set_0_b(self, mmio),
            0xC1 => opcodes::set_0_c(self, mmio),
            0xC2 => opcodes::set_0_d(self, mmio),
            0xC3 => opcodes::set_0_e(self, mmio),
            0xC4 => opcodes::set_0_h(self, mmio),
            0xC5 => opcodes::set_0_l(self, mmio),
            0xC6 => opcodes::set_0_hl(self, mmio),
            0xC7 => opcodes::set_0_a(self, mmio),
            0xC8 => opcodes::set_1_b(self, mmio),
            0xC9 => opcodes::set_1_c(self, mmio),
            0xCA => opcodes::set_1_d(self, mmio),
            0xCB => opcodes::set_1_e(self, mmio),
            0xCC => opcodes::set_1_h(self, mmio),
            0xCD => opcodes::set_1_l(self, mmio),
            0xCE => opcodes::set_1_hl(self, mmio),
            0xCF => opcodes::set_1_a(self, mmio),
            0xD0 => opcodes::set_2_b(self, mmio),
            0xD1 => opcodes::set_2_c(self, mmio),
            0xD2 => opcodes::set_2_d(self, mmio),
            0xD3 => opcodes::set_2_e(self, mmio),
            0xD4 => opcodes::set_2_h(self, mmio),
            0xD5 => opcodes::set_2_l(self, mmio),
            0xD6 => opcodes::set_2_hl(self, mmio),
            0xD7 => opcodes::set_2_a(self, mmio),
            0xD8 => opcodes::set_3_b(self, mmio),
            0xD9 => opcodes::set_3_c(self, mmio),
            0xDA => opcodes::set_3_d(self, mmio),
            0xDB => opcodes::set_3_e(self, mmio),
            0xDC => opcodes::set_3_h(self, mmio),
            0xDD => opcodes::set_3_l(self, mmio),
            0xDE => opcodes::set_3_hl(self, mmio),
            0xDF => opcodes::set_3_a(self, mmio),
            0xE0 => opcodes::set_4_b(self, mmio),
            0xE1 => opcodes::set_4_c(self, mmio),
            0xE2 => opcodes::set_4_d(self, mmio),
            0xE3 => opcodes::set_4_e(self, mmio),
            0xE4 => opcodes::set_4_h(self, mmio),
            0xE5 => opcodes::set_4_l(self, mmio),
            0xE6 => opcodes::set_4_hl(self, mmio),
            0xE7 => opcodes::set_4_a(self, mmio),
            0xE8 => opcodes::set_5_b(self, mmio),
            0xE9 => opcodes::set_5_c(self, mmio),
            0xEA => opcodes::set_5_d(self, mmio),
            0xEB => opcodes::set_5_e(self, mmio),
            0xEC => opcodes::set_5_h(self, mmio),
            0xED => opcodes::set_5_l(self, mmio),
            0xEE => opcodes::set_5_hl(self, mmio),
            0xEF => opcodes::set_5_a(self, mmio),
            0xF0 => opcodes::set_6_b(self, mmio),
            0xF1 => opcodes::set_6_c(self, mmio),
            0xF2 => opcodes::set_6_d(self, mmio),
            0xF3 => opcodes::set_6_e(self, mmio),
            0xF4 => opcodes::set_6_h(self, mmio),
            0xF5 => opcodes::set_6_l(self, mmio),
            0xF6 => opcodes::set_6_hl(self, mmio),
            0xF7 => opcodes::set_6_a(self, mmio),
            0xF8 => opcodes::set_7_b(self, mmio),
            0xF9 => opcodes::set_7_c(self, mmio),
            0xFA => opcodes::set_7_d(self, mmio),
            0xFB => opcodes::set_7_e(self, mmio),
            0xFC => opcodes::set_7_h(self, mmio),
            0xFD => opcodes::set_7_l(self, mmio),
            0xFE => opcodes::set_7_hl(self, mmio),
            0xFF => opcodes::set_7_a(self, mmio),
        }
    }
}
